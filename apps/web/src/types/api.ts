/**
 * This file is generated by scripts/sync-api-types.mjs
 * Do not edit directly. Run `pnpm run sync:api-types` to regenerate.
 */

// from apps/api/src/ai/flows/analyze-consumption-data.ts
export type AnalyzeConsumptionDataInput = any;

// from apps/api/src/ai/flows/analyze-consumption-data.ts
export type AnalyzeConsumptionDataOutput = any;

// from apps/api/src/ai/flows/extract-data-from-nfce-web.ts
export type ExtractDataFromNfceWebInput = any;

// from apps/api/src/ai/flows/extract-data-from-nfce-web.ts
export type ExtractDataFromNfceWebOutput = any;

// from apps/api/src/ai/flows/extract-data-from-page.ts
export type ExtractDataFromPageInput = any;

// from apps/api/src/ai/flows/extract-data-from-page.ts
export type ExtractDataFromPageOutput = any;

// from apps/api/src/ai/flows/extract-data-from-pdf.ts
export type ExtractDataFromPdfInput = any;

// from apps/api/src/ai/flows/extract-data-from-pdf.ts
export type ExtractDataFromPdfOutput = any;

// from apps/api/src/ai/flows/extract-from-receipt-photo.ts
export type ExtractFromReceiptPhotoInput = any;

// from apps/api/src/ai/flows/extract-from-receipt-photo.ts
export type ExtractFromReceiptPhotoOutput = any;

// from apps/api/src/ai/flows/extract-nfce-from-html.ts
export type ExtractNfceFromHtmlInput = any;

// from apps/api/src/ai/flows/extract-nfce-from-html.ts
export type ExtractNfceFromHtmlOutput = any;

// from apps/api/src/ai/flows/extract-product-data.ts
export type ExtractProductDataInput = any;

// from apps/api/src/ai/flows/extract-product-data.ts
export type ExtractProductDataOutput = any;

// from apps/api/src/ai/flows/generate-shopping-list.ts
export type GenerateShoppingListInput = any;

// from apps/api/src/ai/flows/generate-shopping-list.ts
export type GenerateShoppingListOutput = any;

// from apps/api/src/ai/flows/generate-shopping-list.ts
export type ShoppingListItem = any;

// from apps/api/src/ai/flows/suggest-missing-items.ts
export type SuggestMissingItemsInput = any;

// from apps/api/src/ai/flows/suggest-missing-items.ts
export type SuggestMissingItemsOutput = any;

// from apps/api/src/auth/authenticated-request.interface.ts
export interface AuthenticatedUser {
    uid: string;
    email?: string;
    [k: string]: unknown;
}

// from apps/api/src/auth/authenticated-request.interface.ts
export interface AuthenticatedRequest extends Request {
    user?: AuthenticatedUser;
}

// from apps/api/src/auth/jwt.util.ts
export type JwtPayload = { uid: string; email?: string } & Record<string, unknown>;

// from apps/api/src/auth/totp.util.ts
export type TotpSecret = { ascii: string; hex: string; base32: string; otpauth_url?: string };

// from apps/api/src/families/dto/update-family.dto.ts
export enum FamilyPlan {
    FREE = 'free',
    PRO = 'pro',
    PREMIUM = 'premium',
}

// from apps/api/src/models/account.ts
export interface Account extends BaseModel {
    userId: ID; // user._id
    name: string;
    currentBalance: number;
    type: AccountType;
    institution?: string; // bank name for bank accounts
    accountNumber?: string; // masked account number
    isActive: boolean;
    color?: string; // for UI display
    iconName?: string; // for UI display
}

// from apps/api/src/models/account.ts
export type AccountType =
    | 'checking' // conta corrente
    | 'savings' // conta poupança
    | 'wallet' // carteira física
    | 'investment' // conta investimento
    | 'credit_card' // cartão de crédito (saldo negativo)
    | 'other';

// from apps/api/src/models/account.ts
export interface AccountSummary {
    totalBalance: number;
    accountsCount: number;
    accountsByType: Record<AccountType, number>; // total balance by type
    recentTransactions: Array<{
        accountId: ID;
        accountName: string;
        type: 'credit' | 'debit';
        amount: number;
        description: string;
        date: string | Date;
    }>;
}

// from apps/api/src/models/available-month.ts
export interface AvailableMonth {
    /** Month/year key in YYYY-MM format or 'no-date' for purchases without dates */
    monthYear: string;

    /** Human-readable display name (e.g., "January 2024" or "No Date") */
    displayName: string;

    /** Total number of purchases in this month */
    purchaseCount: number;

    /** Total amount spent in this month */
    totalAmount: number;

    /** Date of the earliest purchase in this month (null for no-date category) */
    earliestPurchase: string | null;

    /** Date of the latest purchase in this month (null for no-date category) */
    latestPurchase: string | null;
}

// from apps/api/src/models/available-month.ts
export interface AvailableMonthsSummary {
    /** Total number of months with purchase data */
    totalMonths: number;

    /** Total number of purchases across all months */
    totalPurchases: number;

    /** Total amount spent across all months */
    totalAmount: number;

    /** Average purchases per month */
    averagePurchasesPerMonth: number;

    /** Average amount spent per month */
    averageAmountPerMonth: number;

    /** Earliest month with purchase data */
    earliestMonth: string | null;

    /** Latest month with purchase data */
    latestMonth: string | null;

    /** Month with the highest spending */
    highestSpendingMonth: AvailableMonth | null;

    /** Month with the most purchases */
    mostActiveMonth: AvailableMonth | null;
}

// from apps/api/src/models/budget.ts
export interface Budget extends BaseModel {
    userId: ID; // user._id
    categoryId: ID; // category._id
    name: string;
    limit: number;
    period: BudgetPeriod;
    startDate: string | Date;
    endDate: string | Date;
    isActive: boolean;
    color?: string;
    iconName?: string;
}

// from apps/api/src/models/budget.ts
export type BudgetPeriod = 'weekly' | 'monthly' | 'quarterly' | 'yearly';

// from apps/api/src/models/budget.ts
export interface BudgetSummary {
    budgetId: ID;
    budgetName: string;
    categoryName: string;
    limit: number;
    spent: number;
    remaining: number;
    percentage: number;
    status: 'on_track' | 'warning' | 'exceeded';
    period: BudgetPeriod;
    daysRemaining: number;
}

// from apps/api/src/models/budget.ts
export interface BudgetAlert {
    budgetId: ID;
    budgetName: string;
    categoryName: string;
    alertType: 'warning' | 'exceeded';
    currentSpent: number;
    limit: number;
    percentage: number;
    message: string;
}

// from apps/api/src/models/category.ts
export interface Category extends BaseModel {
    // i18n names object used by DTO
    names: Record<string, string>;
    colorLight: string;
    colorDark: string;
    iconName: string;
}

// from apps/api/src/models/common.ts
export type ID = string;

// from apps/api/src/models/common.ts
export interface BaseModel<T = ID> {
    _id: T;
    createdAt: string | Date;
    updatedAt: string | Date;
}

// from apps/api/src/models/create-types.ts
export type CreateProduct = Omit<Product, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateCategory = Omit<Category, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateExpense = Omit<Expense, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateAccount = Omit<Account, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateCreditCard = Omit<CreditCard, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateBudget = Omit<Budget, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateGoal = Omit<Goal, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateGoalDeposit = Omit<GoalDeposit, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateInvestment = Omit<Investment, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateInvestmentTransaction = Omit<InvestmentTransaction, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateSubscription = Omit<Subscription, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreatePlan = Omit<Plan, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateCreditTransaction = Omit<CreditTransaction, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateStore = Omit<Store, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreatePantryItem = Omit<PantryItem, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreatePurchase = Omit<Purchase, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateShoppingList = Omit<ShoppingList, '_id'> & { _id?: string };

// from apps/api/src/models/create-types.ts
export type CreateFamily = Omit<Family, '_id'> & { _id?: string };

// from apps/api/src/models/credit-card.ts
export interface CreditCard extends BaseModel {
    userId: ID; // user._id
    name: string;
    lastFourDigits: string;
    cardType: CardType;
    creditLimit: number;
    currentBalance: number;
    availableLimit: number;
    dueDay: number; // dia do mês do vencimento
    closingDay: number; // dia do mês do fechamento
    isActive: boolean;
    color?: string;
    iconName?: string;
}

// from apps/api/src/models/credit-card.ts
export type CardType = 'visa' | 'mastercard' | 'amex' | 'elo' | 'other';

// from apps/api/src/models/credit-card.ts
export interface CreditCardSummary {
    totalCards: number;
    totalCreditLimit: number;
    totalUsedLimit: number;
    totalAvailableLimit: number;
    cardsByType: Record<CardType, number>;
    upcomingPayments: Array<{
        cardId: ID;
        cardName: string;
        amount: number;
        dueDate: string | Date;
    }>;
}

// from apps/api/src/models/credit-transaction.ts
export interface CreditTransaction extends BaseModel {
    userId: ID; // user._id
    cardId: ID; // credit_card._id
    expenseId: ID; // expense._id
    amount: number;
    description: string;
    transactionDate: string | Date;
    dueDate: string | Date;
    isPaid: boolean;
    paidDate?: string | Date;
    installmentNumber?: number; // número da parcela
    totalInstallments?: number; // total de parcelas
    monthlyAmount?: number; // valor da parcela mensal
}

// from apps/api/src/models/credit-transaction.ts
export interface CreditInvoice {
    cardId: ID;
    cardName: string;
    month: string; // YYYY-MM
    totalAmount: number;
    dueDate: string | Date;
    transactions: Array<{
        transactionId: ID;
        description: string;
        amount: number;
        transactionDate: string | Date;
        installmentInfo?: string;
    }>;
    isPaid: boolean;
    paidDate?: string | Date;
}

// from apps/api/src/models/credit-transaction.ts
export interface CreditTransactionSummary {
    totalTransactions: number;
    totalAmount: number;
    paidTransactions: number;
    unpaidTransactions: number;
    upcomingPayments: Array<{
        transactionId: ID;
        cardName: string;
        description: string;
        amount: number;
        dueDate: string | Date;
    }>;
}

// from apps/api/src/models/expense.ts
export interface Expense extends BaseModel {
    userId: ID; // user._id
    categoryId: ID; // category._id
    amount: number;
    date: string | Date;
    paymentMethod: PaymentMethod;
    description?: string;
    accountId?: ID; // account._id - optional, for balance tracking
    tags?: string[];
    isRecurring?: boolean;
    recurringId?: ID; // if this expense is part of a recurring transaction
}

// from apps/api/src/models/expense.ts
export type PaymentMethod = 'cash' | 'credit_card' | 'debit_card' | 'bank_transfer' | 'pix' | 'other';

// from apps/api/src/models/expense.ts
export interface ExpenseSummary {
    totalAmount: number;
    expensesCount: number;
    categoryBreakdown: Array<{
        categoryId: ID;
        categoryName: string;
        totalAmount: number;
        percentage: number;
    }>;
    monthlyTrend: Array<{
        month: string;
        totalAmount: number;
    }>;
}

// from apps/api/src/models/family-member.ts
export interface FamilyMember extends BaseModel {
    familyId: ID; // family._id
    userId: ID; // user._id
    displayName: string; // user.displayName
    role: 'owner' | 'admin' | 'member';
    type: 'adult' | 'child' | 'pet';
}

// from apps/api/src/models/family.ts
export interface Family extends BaseModel {
    // DTOs call this familyName
    familyName: string;
    ownerId: ID; // user._id
    plan?: 'free' | 'premium' | 'pro';
    planExpiresAt?: Date | null;
    familyComposition?: FamilyComposition;
}

// from apps/api/src/models/family.ts
export interface FamilyComposition {
    adults: number;
    children: number;
    pets: number;
}

// from apps/api/src/models/goal.ts
export interface Goal extends BaseModel {
    userId: ID; // user._id
    name: string;
    description?: string;
    targetAmount: number;
    currentAmount: number;
    targetDate: string | Date;
    priority: GoalPriority;
    category?: string; // e.g., 'vacation', 'emergency', 'car', 'house'
    isCompleted: boolean;
    completedDate?: string | Date;
    color?: string;
    iconName?: string;
}

// from apps/api/src/models/goal.ts
export interface GoalDeposit extends BaseModel {
    userId: ID; // user._id
    goalId: ID; // goal._id
    amount: number;
    description?: string;
    depositDate: string | Date;
    source?: string; // e.g., 'salary', 'bonus', 'savings'
}

// from apps/api/src/models/goal.ts
export type GoalPriority = 'low' | 'medium' | 'high' | 'urgent';

// from apps/api/src/models/goal.ts
export interface GoalSummary {
    goalId: ID;
    name: string;
    targetAmount: number;
    currentAmount: number;
    progressPercentage: number;
    remainingAmount: number;
    daysRemaining: number;
    isCompleted: boolean;
    priority: GoalPriority;
    category?: string;
}

// from apps/api/src/models/goal.ts
export interface GoalProgress {
    goalId: ID;
    goalName: string;
    deposits: Array<{
        depositId: ID;
        amount: number;
        description?: string;
        depositDate: string | Date;
        source?: string;
    }>;
    totalDeposits: number;
    averageDeposit: number;
    lastDepositDate?: string | Date;
}

// from apps/api/src/models/investment.ts
export interface Investment extends BaseModel {
    userId: ID; // user._id
    name: string; // nome do investimento (ex: "Tesouro Selic 2025")
    type: InvestmentType; // tipo de investimento
    asset: string; // código do ativo (ex: "LFT", "PETR4", "BTC")
    quantity: number; // quantidade investida
    averagePrice: number; // preço médio de compra
    totalInvested: number; // total investido (quantity * averagePrice)
    currentPrice?: number; // preço atual do ativo
    currentValue?: number; // valor atual (quantity * currentPrice)
    profitability?: number; // rentabilidade em reais
    profitabilityPercent?: number; // rentabilidade percentual
    lastUpdated?: string | Date; // última atualização do preço
    broker?: string; // corretora utilizada
    notes?: string; // observações
    isActive: boolean; // se o investimento ainda está ativo
}

// from apps/api/src/models/investment.ts
export interface InvestmentTransaction extends BaseModel {
    userId: ID; // user._id
    investmentId: ID; // investment._id
    type: TransactionType; // compra, venda, dividendo, juros
    quantity: number; // quantidade da transação
    price: number; // preço por unidade
    totalValue: number; // valor total da transação
    date: string | Date; // data da transação
    fees?: number; // taxas cobradas
    notes?: string; // observações
}

// from apps/api/src/models/investment.ts
export type InvestmentType =
    | 'stocks' // ações
    | 'bonds' // títulos públicos/privados
    | 'funds' // fundos de investimento
    | 'crypto' // criptomoedas
    | 'real_estate' // imóveis
    | 'other';

// from apps/api/src/models/investment.ts
export type TransactionType =
    | 'buy' // compra
    | 'sell' // venda
    | 'dividend' // dividendo
    | 'interest' // juros
    | 'bonus';

// from apps/api/src/models/investment.ts
export interface InvestmentSummary {
    totalInvested: number;
    currentValue: number;
    totalProfitability: number;
    totalProfitabilityPercent: number;
    investmentsByType: Record<
        InvestmentType,
        {
            count: number;
            invested: number;
            currentValue: number;
            profitability: number;
        }
    >;
    topPerformers: Array<{
        investmentId: ID;
        name: string;
        profitabilityPercent: number;
        profitability: number;
    }>;
    recentTransactions: Array<{
        investmentName: string;
        type: TransactionType;
        amount: number;
        date: string | Date;
    }>;
}

// from apps/api/src/models/investment.ts
export interface InvestmentPortfolio {
    userId: ID;
    summary: InvestmentSummary;
    investments: Investment[];
    monthlyEvolution: Array<{
        month: string;
        totalValue: number;
        totalInvested: number;
    }>;
}

// from apps/api/src/models/monthly-purchase-group.ts
export interface MonthlyPurchaseGroup {
    /** Month and year in YYYY-MM format for sorting (e.g., "2024-01") */
    monthYear: string;

    /** Human-readable month and year for display (e.g., "January 2024") */
    displayName: string;

    /** Total amount spent for all purchases in this month */
    totalAmount: number;

    /** Number of purchases in this month */
    purchaseCount: number;

    /** Array of purchases for this month, sorted by date descending */
    purchases: Purchase[];
}

// from apps/api/src/models/monthly-purchase-group.ts
export interface MonthKey {
    /** Year as number (e.g., 2024) */
    year: number;

    /** Month as number (1-12) */
    month: number;

    /** Formatted key for sorting (YYYY-MM) */
    key: string;

    /** Display name for the month (e.g., "January 2024") */
    displayName: string;
}

// from apps/api/src/models/monthly-purchase-group.ts
export interface DateInfo {
    /** Whether the date is valid */
    isValid: boolean;

    /** The original date value */
    originalDate: Date | null | undefined;

    /** Extracted month key if date is valid, null otherwise */
    monthKey: MonthKey | null;
}

// from apps/api/src/models/monthly-purchase-group.ts
export interface MonthlyGroupingOptions {
    /** Whether to include purchases with invalid/null dates in a "No Date" group */
    includeNoDateGroup?: boolean;

    /** Sort order for monthly groups (default: 'desc' for newest first) */
    sortOrder?: 'asc' | 'desc';

    /** Sort order for purchases within each month (default: 'desc' for newest first) */
    purchaseSortOrder?: 'asc' | 'desc';
}

// from apps/api/src/models/monthly-purchase-group.ts
export type MonthName = (typeof MONTHLY_GROUPING_CONSTANTS.MONTH_NAMES)[number];

// from apps/api/src/models/monthly-purchase-group.ts
export interface MonthlyGroupingResult {
    /** Array of monthly purchase groups */
    groups: MonthlyPurchaseGroup[];

    /** Total number of purchases processed */
    totalPurchases: number;

    /** Number of purchases with valid dates */
    validDatePurchases: number;

    /** Number of purchases with invalid/null dates */
    invalidDatePurchases: number;

    /** Overall total amount across all groups */
    overallTotal: number;
}

// from apps/api/src/models/pantry-item.ts
export interface PantryItem extends BaseModel {
    familyId: ID; // family._id
    productId?: ID; // product._id
    productName?: string; // product.name
    addedBy?: ID; // user._id
    quantity?: number;
    unit?: ProductUnit;
    lastUpdatedAt?: string | Date;
}

// from apps/api/src/models/product.ts
export interface Product extends BaseModel {
    name: string;
    description?: string;
    barcode?: string;
    brand?: string;
    category: string;
    subCategory?: string;
    unit: ProductUnit; // 'kg', 'l' for weight/volume, 'un' for unit
}

// from apps/api/src/models/product.ts
export type ProductUnit = 'kg' | 'l' | 'un';

// from apps/api/src/models/purchase.ts
export interface Purchase extends BaseModel {
    familyId: ID; // family._id
    purchasedBy: ID; // user._id
    storeId: ID; // store._id
    accessKey: string;
    storeName?: string; // store.name
    date?: string | Date;
    totalAmount?: number;
    discount?: number;
    purchaseType?: 'iFood' | '99' | 'store' | 'marketplace' | 'online_store';
    items?: Array<PurchaseItem>;
}

// from apps/api/src/models/purchase.ts
export interface PurchaseItem {
    productId: string; // product._id (renamed from _id)
    name: string;
    description?: string;
    barcode?: string;
    brand?: string;
    category: string;
    subCategory?: string;
    unit: ProductUnit;
    quantity: number;
    price: number;
    total: number; // price * quantity
}

// from apps/api/src/models/shopping-list.ts
export interface ShoppingList extends BaseModel {
    familyId: ID;
    name?: string;
    createdBy?: ID;
    status?: string;
    items?: Array<ShoppingListItem>;
}

// from apps/api/src/models/store-preference.ts
export interface Store extends BaseModel {
    name: string;
    cnpj: string;
    address?: string;
    phone?: string;
}

// from apps/api/src/models/store-preference.ts
export interface StorePreference extends BaseModel {
    familyId: ID;
    storeId: ID;
    preference: 'favorite' | 'ignored' | 'neutral';
    lastPurchaseDate?: string | Date;
    purchaseCount: number;
}

// from apps/api/src/models/store-preference.ts
export type StorePreferenceType = 'favorite' | 'ignored' | 'neutral';

// from apps/api/src/models/store.ts
export interface StoreLocation {
    latitude: number;
    longitude: number;
}

// from apps/api/src/models/subscription.ts
export interface Subscription extends BaseModel {
    userId: ID; // user._id
    planId: ID; // plan._id
    status: SubscriptionStatus;
    startDate: string | Date;
    endDate?: string | Date; // null for active subscriptions
    autoRenew: boolean;
    paymentMethod?: string;
    lastPaymentDate?: string | Date;
    nextPaymentDate?: string | Date;
    amount: number; // monthly amount
    currency: string;
    features: string[]; // list of enabled features
}

// from apps/api/src/models/subscription.ts
export interface Plan extends BaseModel {
    name: string;
    description: string;
    price: number;
    currency: string;
    interval: 'monthly' | 'yearly';
    features: PlanFeature[];
    isActive: boolean;
    maxUsers?: number;
    trialDays?: number;
}

// from apps/api/src/models/subscription.ts
export interface PlanFeature {
    name: string;
    description: string;
    code: string; // unique identifier for feature
    isEnabled: boolean;
}

// from apps/api/src/models/subscription.ts
export type SubscriptionStatus = 'active' | 'canceled' | 'expired' | 'trial' | 'past_due';

// from apps/api/src/models/subscription.ts
export type FeatureCode =
    | 'basic_finances' // expenses, accounts, categories
    | 'advanced_finances' // budgets, goals, credit cards
    | 'investments' // investment portfolio tracking
    | 'gamification' // achievements and badges
    | 'education' // financial education content
    | 'offline_sync' // offline functionality
    | 'bank_integration' // automatic bank transaction import
    | 'advanced_reports' // detailed analytics and projections
    | 'unlimited_storage' // unlimited data storage
    | 'priority_support';

// from apps/api/src/models/subscription.ts
export interface UserFeatures {
    userId: ID;
    features: Record<FeatureCode, boolean>;
    subscription?: {
        planId: ID;
        planName: string;
        status: SubscriptionStatus;
        endDate?: string | Date;
    };
}

// from apps/api/src/models/user.ts
export interface User extends BaseModel<string> {
    email?: string;
    displayName?: string;
    photoURL?: string;
    // allow extra legacy fields
    [key: string]: any;
}

// from apps/api/src/payments/dto/create-checkout.dto.ts
export enum CheckoutMode {
    PAYMENT = 'payment',
    SUBSCRIPTION = 'subscription',
    SETUP = 'setup',
}

// from apps/api/src/payments/dto/create-embedded-pro-plan-checkout.dto.ts
export enum ProPlanType {
    MONTHLY = 'monthly',
    YEARLY = 'yearly',
}

// from apps/api/src/payments/schemas/payment-polling-status.schema.ts
export type PaymentPollingStatusDocument = PaymentPollingStatus & Document;

// from apps/api/src/payments/schemas/polar-transaction.schema.ts
export type PolarTransactionDocument = PolarTransaction & Document;

// from apps/api/src/payments/schemas/polar-transaction.schema.ts
export enum PolarTransactionStatus {
    OPEN = 'open',
    COMPLETED = 'completed',
    FAILED = 'failed',
    EXPIRED = 'expired',
    CANCELLED = 'cancelled',
}

// from apps/api/src/payments/schemas/stripe-transaction.schema.ts
export type StripeTransactionDocument = StripeTransaction & Document;

// from apps/api/src/payments/services/payments.service.ts
export enum StripeTransactionStatus {
    PENDING = 'pending',
    PROCESSING = 'processing',
    SUCCEEDED = 'succeeded',
    FAILED = 'failed',
    CANCELED = 'canceled',
    EXPIRED = 'expired',
    REFUNDED = 'refunded',
}

// from apps/api/src/payments/services/stripe-client.service.ts
export interface CreateCheckoutParams {
    priceIds: string[];
    customerId?: string;
    customerEmail?: string;
    successUrl?: string;
    cancelUrl?: string;
    metadata?: Record<string, any>;
    customerBillingAddress?: {
        line1?: string;
        line2?: string;
        city?: string;
        state?: string;
        postalCode?: string;
        country: string;
    };
    mode?: 'payment' | 'subscription' | 'setup';
}

// from apps/api/src/payments/services/stripe-client.service.ts
export interface CreatePaymentIntentParams {
    amount: number;
    currency: string;
    customerEmail: string;
    customerName: string;
    billingAddress: {
        line1: string;
        line2?: string;
        city: string;
        state: string;
        postalCode: string;
        country: string;
    };
    metadata?: Record<string, any>;
    paymentMethodTypes?: string[];
}

// from apps/api/src/payments/services/stripe-client.service.ts
export interface CreateCustomerParams {
    email: string;
    name?: string;
    address?: {
        line1?: string;
        line2?: string;
        city?: string;
        state?: string;
        postalCode?: string;
        country?: string;
    };
    metadata?: Record<string, any>;
}

// from apps/api/src/payments/types/polar-api.types.ts
export interface PolarCheckoutSession {
    id: string;
    totalAmount?: number;
    currency?: string;
    status?: string;
    productPriceId?: string;
    discountId?: string;
    customerId?: string;
    customerEmail?: string;
    url?: string;
    expiresAt?: string | Date;
    productId?: string;
    clientSecret?: string;
    [key: string]: unknown;
}

// from apps/api/src/payments/types/polar-api.types.ts
export interface PolarPaymentIntent {
    id: string;
    clientSecret: string;
    amount: number;
    currency: string;
    status: string;
    metadata?: Record<string, unknown>;
    [key: string]: unknown;
}

// from apps/api/src/payments/types/polar-api.types.ts
export interface PolarCustomer {
    id: string;
    email?: string;
    name?: string;
    [key: string]: unknown;
}

// from apps/api/src/payments/types/polar-api.types.ts
export interface PolarProduct {
    id: string;
    name: string;
    description?: string;
    prices?: PolarPrice[];
    [key: string]: unknown;
}

// from apps/api/src/payments/types/polar-api.types.ts
export interface PolarPrice {
    id: string;
    amount: number;
    currency: string;
    recurring?: {
        interval: string;
        intervalCount: number;
    };
    [key: string]: unknown;
}

// from apps/api/src/payments/types/polar-api.types.ts
export interface PolarSubscription {
    id: string;
    customerId: string;
    productId: string;
    priceId: string;
    status: string;
    currentPeriodStart: string | Date;
    currentPeriodEnd: string | Date;
    [key: string]: unknown;
}

// from apps/api/src/payments/types/polar-api.types.ts
export interface PolarWebhookPayload {
    type: string;
    data: {
        id: string;
        [key: string]: unknown;
    };
    [key: string]: unknown;
}

// from apps/api/src/payments/types/polar-api.types.ts
export interface CheckoutCreateRequest {
    products: string[];
    customerId?: string;
    customerEmail?: string;
    successUrl?: string;
    metadata?: Record<string, unknown>;
    customerBillingAddress?: {
        line1: string;
        line2?: string;
        city: string;
        state: string;
        postal_code: string;
        country: string;
    };
}

// from apps/api/src/shopping-lists/dto/create-shopping-list.dto.ts
export enum ShoppingListStatus {
    ACTIVE = 'active',
    CREATED = 'created',
    COMPLETED = 'completed',
    ARCHIVED = 'archived',
}

// from apps/api/src/shopping-lists/shopping-list-items.service.ts
export interface ShoppingListItemResponse {
    id: string;
    name: string;
    quantity: number;
    purchased: boolean;
    // Extended properties for frontend compatibility
    unit?: string;
    isCompleted?: boolean;
    checked?: boolean;
    notes?: string;
    estimatedPrice?: number;
}

// from apps/api/src/stores/dto/create-store.dto.ts
export enum StoreType {
    SUPERMERCADO = 'supermercado',
    ATACADO = 'atacado',
    FEIRA = 'feira',
    MARKETPLACE = 'marketplace',
    ACOUGUE = 'acougue',
    PADARIA = 'padaria',
    FARMACIA = 'farmacia',
    OUTRO = 'outro',
}

// from apps/api/src/utils/dto-mappers.ts
export type CreateStorePreference = StorePreference;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type PaymentPollingStatus = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type PolarTransaction = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type StripeTransaction = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type Achievement = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type BalanceProjection = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type BankAccount = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type BankTransaction = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type BudgetProgress = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type RecurringTransaction = any;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type CreateFamilyRequest = import('./api').CreateFamily;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type CreatePantryItemRequest = import('./api').CreatePantryItem;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type CreateProductRequest = import('./api').CreateProduct;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type CreatePurchaseRequest = import('./api').CreatePurchase;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type CreateShoppingListRequest = import('./api').CreateShoppingList;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type CreateStorePreferenceRequest = import('./api').CreateStorePreference;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type CreateStoreRequest = import('./api').CreateStore;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type ExtractDataFromPageRequest = import('./api').ExtractDataFromPageInput;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type ExtractDataFromPdfRequest = import('./api').ExtractDataFromPdfInput;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type ExtractFromReceiptPhotoRequest = import('./api').ExtractFromReceiptPhotoInput;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type ExtractProductDataRequest = import('./api').ExtractProductDataInput;

// preserved from web types
// original-file: /Users/titorm/Documents/shop-wise/apps/web/src/types/api.ts
export type SuggestMissingItemsRequest = import('./api').SuggestMissingItemsInput;
export * from './api-compat';
